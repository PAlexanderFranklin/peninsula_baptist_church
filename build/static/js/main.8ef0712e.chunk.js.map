{"version":3,"sources":["views/Navbar/Tab/Tab.js","views/Navbar/Navbar.js","views/Pages/Home/Home.js","views/Pages/Gallery/Gallery.js","views/Pages/Visit/Visit.js","views/Pages/Events/Events.js","views/App.js","serviceWorker.js","index.js"],"names":["Tab","props","className","to","link","exact","children","Navbar","Home","href","title","Gallery","Visit","Events","App","path","component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"uZAYeA,MARf,SAAaC,GACX,OACE,wBAAIC,UAAU,OACZ,kBAAC,IAAD,CAASC,GAAIF,EAAMG,KAAMC,OAAK,GAAEJ,EAAMK,YCY7BC,MAff,WACE,OACE,gCACE,yBAAKL,UAAU,UACb,4BACE,kBAAC,EAAD,CAAKE,KAAK,KAAV,4BACA,kBAAC,EAAD,CAAKA,KAAK,YAAV,WACA,kBAAC,EAAD,CAAKA,KAAK,UAAV,SACA,kBAAC,EAAD,CAAKA,KAAK,WAAV,c,MCcKI,MAvBf,WACE,OACE,6BACE,oFACA,mHACA,4DACO,uBAAGC,KAAK,0CAAR,+BAEP,oGACA,yCAEE,6BACA,uBAAGC,MAAM,kCACTD,KAAK,2EADL,YAIA,6BACA,uBAAGC,MAAM,yBAAyBD,KAAK,yCAAvC,c,MCTOE,MARf,SAAiBV,GACf,OACE,yBAAKC,UAAU,WAAf,c,MCqBWU,MAvBf,SAAeX,GACb,OACE,yBAAKC,UAAU,SACb,6BACE,6CACA,+DACmC,6BADnC,+BAE8B,6BAF9B,mCAGkC,6BAHlC,6CAI4C,+BAG9C,6BACE,wCACA,oDACwB,6BADxB,6B,MCNOW,MARf,SAAgBZ,GACd,OACE,yBAAKC,UAAU,UAAf,oB,OCkBWY,MAdf,WACE,OACE,yBAAKZ,UAAU,OACb,kBAAC,EAAD,MACA,yBAAKA,UAAU,WACb,kBAAC,IAAD,CAAOa,KAAK,IAAIV,OAAK,EAACW,UAAWR,IACjC,kBAAC,IAAD,CAAOO,KAAK,WAAWV,OAAK,EAACW,UAAWL,IACxC,kBAAC,IAAD,CAAOI,KAAK,SAASV,OAAK,EAACW,UAAWJ,IACtC,kBAAC,IAAD,CAAOG,KAAK,UAAUV,OAAK,EAACW,UAAWH,OCL3BI,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,IAAD,KACE,kBAAC,EAAD,QAGJC,SAASC,eAAe,SDsHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.8ef0712e.chunk.js","sourcesContent":["import React from 'react';\nimport './Tab.css';\nimport {NavLink} from 'react-router-dom'\n\nfunction Tab(props) {\n  return (\n    <li className=\"Tab\">\n      <NavLink to={props.link} exact>{props.children}</NavLink>\n    </li>\n  );\n}\n\nexport default Tab;\n","import React from 'react';\nimport './Navbar.css';\nimport Tab from './Tab/Tab'\n\nfunction Navbar() {\n  return (\n    <header>\n      <nav className=\"Navbar\">\n        <ul>\n          <Tab link=\"/\">Peninsula Baptist Church</Tab>\n          <Tab link=\"/gallery\">Gallery</Tab>\n          <Tab link=\"/visit\">Visit</Tab>\n          <Tab link=\"/events\">Events</Tab>\n        </ul>\n      </nav>\n    </header>\n  );\n}\n\nexport default Navbar;\n","import React from 'react';\nimport './Home.css';\n\nfunction Home() {\n  return (\n    <div>\n      <p>We are a Southern Baptist Church in Portland, Oregon.</p>\n      <p>We meet each Sunday and Wednesday. Our services are traditional and family-friendly.</p>\n      <p>Our Statement of Faith is\n         the <a href=\"http://www.sbc.net/bfm2000/bfm2000.asp\">Baptist Faith and Message.</a>\n      </p>\n      <p>Feel free to look at our service times and come visit us next Sunday!</p>\n      <p>\n        Find us on:\n        <br/>\n        <a title=\"Peninsula Baptist Facebook Page\"\n        href=\"https://www.facebook.com/pages/Peninsula-Baptist-Church/144712978884612\">\n          Facebook\n        </a>\n        <br/>\n        <a title=\"Peninsula Baptist Blog\" href=\"http://peninsulabaptist.blogspot.com/\">Blogger</a>\n      </p>\n    </div>\n  );\n}\n\nexport default Home;\n","import React from 'react';\nimport './Gallery.css';\n\nfunction Gallery(props) {\n  return (\n    <div className=\"gallery\">\n      Pictures.\n    </div>\n  );\n}\n\nexport default Gallery;\n","import React from 'react';\nimport './Visit.css';\n\nfunction Visit(props) {\n  return (\n    <div className=\"visit\">\n      <div>\n        <h2>Service Times</h2>\n        <p>\n          Sunday Morning Service: 11:00 am <br />\n          Sunday Bible Study: 9:45 am <br />\n          Sunday Evening Service: 6:00 pm <br />\n          Wednesday Evening Prayer Meeting: 7:00 pm <br />\n        </p>\n      </div>\n      <div>\n        <h2>Location</h2>\n        <p>\n          2653 N Lombard Street <br />\n          Portland, Oregon 97217\n        </p>\n      </div>\n    </div>\n  );\n}\n\nexport default Visit;\n","import React from 'react';\nimport './Events.css';\n\nfunction Events(props) {\n  return (\n    <div className=\"events\">\n      Events go here.\n    </div>\n  );\n}\n\nexport default Events;\n","import React from 'react';\nimport './App.css';\nimport Navbar from './Navbar/Navbar'\nimport Home from './Pages/Home/Home'\nimport Gallery from './Pages/Gallery/Gallery'\nimport Visit from './Pages/Visit/Visit'\nimport Events from './Pages/Events/Events'\nimport {Route} from 'react-router-dom'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Navbar />\n      <div className=\"content\">\n        <Route path=\"/\" exact component={Home} />\n        <Route path=\"/gallery\" exact component={Gallery} />\n        <Route path=\"/visit\" exact component={Visit} />\n        <Route path=\"/events\" exact component={Events} />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {BrowserRouter} from 'react-router-dom';\nimport './index.css';\nimport App from './views/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}